// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// UserSaver is an autogenerated mock type for the UserSaver type
type UserSaver struct {
	mock.Mock
}

// Save provides a mock function with given fields: ctx, login, passwordHash
func (_m *UserSaver) Save(ctx context.Context, login string, passwordHash string) (uint64, error) {
	ret := _m.Called(ctx, login, passwordHash)

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (uint64, error)); ok {
		return rf(ctx, login, passwordHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) uint64); ok {
		r0 = rf(ctx, login, passwordHash)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, login, passwordHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserSaver interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserSaver creates a new instance of UserSaver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserSaver(t mockConstructorTestingTNewUserSaver) *UserSaver {
	mock := &UserSaver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
