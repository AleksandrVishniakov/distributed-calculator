// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// TokenGenerator is an autogenerated mock type for the TokenGenerator type
type TokenGenerator struct {
	mock.Mock
}

// NewToken provides a mock function with given fields: userId, login
func (_m *TokenGenerator) NewToken(userId uint64, login string) (string, error) {
	ret := _m.Called(userId, login)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, string) (string, error)); ok {
		return rf(userId, login)
	}
	if rf, ok := ret.Get(0).(func(uint64, string) string); ok {
		r0 = rf(userId, login)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uint64, string) error); ok {
		r1 = rf(userId, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTokenGenerator interface {
	mock.TestingT
	Cleanup(func())
}

// NewTokenGenerator creates a new instance of TokenGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTokenGenerator(t mockConstructorTestingTNewTokenGenerator) *TokenGenerator {
	mock := &TokenGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
